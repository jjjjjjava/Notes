{"layout":"timeline","root":{"data":{"text":"<p><strong>开始</strong></p>","richText":true,"expand":true,"isActive":false,"uid":"0714e90d-8a49-45a1-91b8-44ee4d2ed92d"},"children":[{"data":{"text":"<p><span style=\"\n      color: #749336;\n      font-family: 微软雅黑, Microsoft YaHei;\n      font-size: 18px;\n      font-weight: noraml;\n      font-style: normal;\n      text-decoration: none\n    \">startup.s</span></p>","generalization":null,"richText":true,"expand":true,"isActive":false,"uid":"3ab85fcf-a841-4bc0-8a71-dae3be9e4bbd"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">开始</span></p>","uid":"3c638258-6ff9-415d-80df-e96af89b34f8","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"\n      color: #749336;\n      font-family: 微软雅黑, Microsoft YaHei;\n      font-size: 14px;\n      font-weight: noraml;\n      font-style: normal;\n      text-decoration: none\n    \">配置处理器模式堆栈空间大小</span></p>","richText":true,"expand":true,"isActive":false,"uid":"01d7d5c5-d03b-4cf5-b904-abe4068aa5f8"},"children":[]},{"data":{"text":"<p><span style=\"\n      color: #749336;\n      font-family: 微软雅黑, Microsoft YaHei;\n      font-size: 14px;\n      font-weight: noraml;\n      font-style: normal;\n      text-decoration: none\n    \">声明外部函数，导出内部全局函数</span></p>","richText":true,"expand":true,"isActive":false,"uid":"b145e9a0-eac6-49f0-99fb-50d191abc814"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">配置异常向量表，并从向量表起始位置执行复位操作</span></p>","uid":"f97ca5ba-d1ed-4dd1-8ac1-2a64ed0d1a9f","expand":true,"richText":true,"isActive":false,"note":"//预先配置\n    .code 32    //指定为32位模式。即:地址总线和数据总线长度都是32位。\n    .section .vector, \"ax\"  //指定一个向量段,向量段属性:ax(可执行) ar:可读,aw:可写。\n    .balign 4   //CPU_STACKS_SIZE将后续指令对齐到4字节边界。 即:指令的内存地址是4的倍数。\n\n//定义向量表的内容\nFUNC_DEF(vector)\n    B       reset   //无条件分支跳转到reset处\n    LDR     PC, undefineEntry\n    LDR     PC, swiEntry\n    LDR     PC, prefetchEntry\n    LDR     PC, abortEntry\n    LDR     PC, reserveEntry\n    LDR     PC, irqEntry\n    LDR     PC, fiqEntry\n    FUNC_END()"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">复位入口</span></p>","uid":"737ae384-cff1-46f4-9953-64386565f006","expand":true,"richText":true,"isActive":false,"note":"//定义向量表的内容\nFUNC_DEF(vector)\nB reset //无条件分支跳转到reset处"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">进入svc32_MODE+关中断</span></p>","expand":true,"richText":true,"isActive":false,"uid":"6d4f9878-4b3b-4be5-b6a4-6785b16d2f90"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">初始化堆栈</span></p>","expand":true,"richText":true,"isActive":false,"uid":"38fca092-4ba8-424c-bd3d-5460e9ff9373"},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">循环开始，为每一个cpu执行堆栈的初始化</span></p>","uid":"3b5d73e5-964e-4fc0-8b0c-1b5d8ec2c8fa","expand":true,"richText":true,"isActive":false,"note":" BL      archMpCur"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">为cpu分配堆栈空间</span></p>","expand":true,"richText":true,"isActive":false,"uid":"a8567659-f985-4383-a86a-9e016099166d","note":"SUBNE   R1, R1, #CPU_STACKS_SIZE"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">为不同的处理器模式设置堆栈指针，以完成堆栈初始化的任务。</span></p>","expand":true,"richText":true,"isActive":false,"uid":"b45da912-3c7e-4454-820c-2e6fd7f99bb4","note":"FUNC_DEF(armInitSP)\n\n    MSR     CPSR_c, #(SVC32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #SVC_STACK_SIZE\n\n    MSR     CPSR_c, #(SYS32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #SYS_STACK_SIZE\n\n    MSR     CPSR_c, #(FIQ32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #FIQ_STACK_SIZE\n\n    MSR     CPSR_c, #(IRQ32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #IRQ_STACK_SIZE\n\n    MSR     CPSR_c, #(UND32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #UND_STACK_SIZE\n\n    MSR     CPSR_c, #(ABT32_MODE | DIS_INT)\n    MOV     SP, R0\n    SUB     R0, R0, #ABT_STACK_SIZE\n\n    MSR     CPSR_c, #(SVC32_MODE | DIS_INT)\n\n    BX      LR\n\n    FUNC_END()"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">循环结束，完成对每一个cpu的堆栈的初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"e99aaf22-d3f5-4326-bed2-a329b3568342"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">错误修正</span></p>","expand":true,"richText":true,"isActive":false,"uid":"ba862c4b-1333-41fc-9c7a-8ce7987d310d"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">cpu复位操作</span></p>","expand":true,"richText":true,"isActive":false,"uid":"90f9231e-7d3b-43da-bf95-a05bc691cb9f"},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">cpu复位开始</span></p>","uid":"bef85fc4-301e-450c-87ba-4da3709fa124","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">获取并判断CPU id（后续根据cpu id进行主从cpu初始化）</span></p>","expand":true,"richText":true,"isActive":false,"uid":"5528ee3c-7717-4357-87fe-687a46f9e573","note":"主cpu进入主cpu复位操作，从cpu进入从cpu复位操作。主从cpu复位操作不同\n"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">主cpu初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"427ab6c2-4d71-4f94-82bb-3f14b5064b26"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">关Cache,MMU以确保 CPU 复位后处于一种干净、可预测的状态</span></p>","expand":true,"richText":true,"isActive":false,"uid":"8128d2d4-c151-4e44-8c3b-327c4899407a"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">初始化Data段，&nbsp;将数据段从 ROM 复制到 RAM,以初始化全局变量和静态变量</span></p>","expand":true,"richText":true,"isActive":false,"uid":"6cfcc66a-1feb-471f-8bf0-4643e2efbd66"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">清零BSS段，&nbsp;BSS:未初始化的全局变量和静态变量所占用的一部分内存</span></p>","expand":true,"richText":true,"isActive":false,"uid":"8bb75513-6780-4a09-9fd7-624997dedd14"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">调用bspinit中targetInit函数，实际函数体内无代码</span></p>","expand":true,"richText":true,"isActive":false,"uid":"4726a523-a2b4-43e4-b882-ea3cc417b682"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">调用bspinit中halPrimraryCpuMain</span></p>","expand":true,"richText":true,"isActive":false,"uid":"7616d468-f754-4491-9843-fee71e4d7dc2","associativeLineTargets":["439cc970-5781-4413-9028-f46563309356"],"associativeLineTargetControlOffsets":[[{"x":195.5,"y":0},{"x":-198.75,"y":12.73829087921115}]],"associativeLinePoint":[{"startPoint":{"x":1581,"y":1083.5},"endPoint":{"x":1866.5,"y":518.2617091207889,"dir":"left","range":-6.761709120788824}}],"associativeLineText":{"439cc970-5781-4413-9028-f46563309356":"调用"}},"children":[]}]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">从cpu初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"9983d755-5914-4922-9272-4bc5be7f539c"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">关Cache,MMU以确保 CPU 复位后处于一种干净、可预测的状态</span></p>","uid":"c0b681d2-664b-47f3-93b8-da9a15eaebcd","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">调用bspinit中halSecondaryCpuMain</span></p>","uid":"84a94cd6-8916-470a-8cca-fc823baf4e4b","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">cpu复位结束</span></p>","expand":true,"richText":true,"isActive":false,"uid":"03119a50-fe5a-43b1-8f56-22e4359b9161"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">整体复位结束</span></p>","expand":true,"richText":true,"isActive":false,"uid":"33cd5bc3-f473-4570-8c2f-961f09ed8cdb"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">结束</span></p>","uid":"105e23af-121c-4c07-b176-d2f0e6e07e7a","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">halPrimraryCpuMain</span></p>","expand":true,"richText":true,"isActive":false,"uid":"439cc970-5781-4413-9028-f46563309356","associativeLineTargets":[],"associativeLineTargetControlOffsets":[],"associativeLinePoint":[],"associativeLineText":{}},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">开始</span></p>","uid":"83fdb10f-3288-4a40-a473-61571fcebacb","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">设备树初级初始化，传递设备树基地址作为参数</span></p>","expand":false,"richText":true,"isActive":false,"uid":"5e767fc0-b579-4d96-83f4-421781d939a0","note":"主要是获取chosen节点中启动参数和cells节点中对设备树成员大小的描述"},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">设备树有效性及合法性检查</span></p>","uid":"c6933e53-aee8-4c56-a966-28a0c799c57e","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">__deviceTreeRootNodesScan扫描根节点信息</span></p>","expand":true,"richText":true,"isActive":false,"uid":"22e79002-2231-4391-b8b4-b77a09aa65d9"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">获取chosen节点，将bootargs存储在_G_ulKernelParam中</span></p>","uid":"3d2583af-d854-442f-a36c-cfa11112dd1b","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">获取cells节点，存储在_G_iRootAddrCells和_G_iRootSizeCells中</span></p>","uid":"1955bc96-21f6-4289-afc4-c2794fe20da2","expand":true,"richText":true,"isActive":false,"generalization":null,"note":"cells有两个属性：address和size，分别表示设备树中address和size数据的表示\naddress-cells 被设置为1，表示每个地址由一个单独的32位整数表示\nsize-cells 也被设置为1，表示每个大小由一个单独的32位整数表示。"},"children":[]}]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">从设备树中获取内核启动参数</span></p>","expand":false,"richText":true,"isActive":false,"uid":"6d070deb-383c-46e9-9deb-4297b1d02858"},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">将bootargs从_G_ulKernelParam中复制保存到pcStartParam</span></p>","uid":"d2fc323d-64ea-486a-8762-de0d3872ea2a","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">API_KernelStartParam设置内核启动参数, 传递pcStartParam作为实参</span></p>","expand":false,"richText":true,"isActive":false,"uid":"d18d0b45-ac71-41cb-b911-abbded7381f6"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">赋值_K_ulNcpus</span></p>","expand":true,"richText":true,"isActive":false,"uid":"0c65f21a-addc-4fef-8b0b-fa1af9350f56"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">赋值_K_pfuncKernelDebugLog</span></p>","expand":true,"richText":true,"isActive":false,"uid":"1fe502ae-b10b-45a8-a995-251216c872ab"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">赋值_K_pfuncKernelDebugError</span></p>","expand":true,"richText":true,"isActive":false,"uid":"4fc1573f-de22-4491-a972-0f16a428ac46"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">设置LW_KERN_FPU_EN_SET</span></p>","expand":true,"richText":true,"isActive":false,"uid":"d0c86dab-0e2f-41a4-8b7a-305b865de8ba"},"children":[]},{"data":{"text":"<p><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54); font-size: 14px;\">赋值_K_bHeapCrossBorderEn</span></p>","expand":true,"richText":true,"isActive":false,"uid":"f7492929-7592-4e64-995f-55d1e310e35a"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">调用API_RootFsMapInit进行根文件系统映射初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"303b456a-3f6a-4531-85fd-17bce31a3b8c","note":"主要是截取描述映射关系的字符串为下面两个数据结构赋值\nstatic LW_ROOTFS_MAP_NODE   _G_rfsmapRoot   = { \"/\" , \"/media/hdd1\" };\nstatic LW_ROOTFS_MAP_NODE   _G_rfsmapSubp[] = {\n    { \"/var\" , \"\" },\n    { \"/usr\" , \"\" },\n    { \"/tmp\" , \"\" },\n    { \"/sbin\", \"\" },\n    { \"/root\", \"\" },\n    { \"/qt\"  , \"\" },\n    { \"/lib\" , \"\" },\n    { \"/home\", \"\" },\n    { \"/etc\" , \"\" },\n    { \"/boot\", \"/media/hdd0\" },\n    { \"/bin\" , \"\" },\n    { \"/apps\", \"\" }\n};"},"children":[]}]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">API_KernelStart启动内核，并传递参数</span></p>","expand":true,"richText":true,"isActive":false,"uid":"329e046c-cdcc-4e61-906d-627d38a49a94","note":"本质是执行以下函数：\n#define API_KernelStart       API_KernelPrimaryStart\n传递如下参数：\nusrStartup    系统启动中的用户回调\npvKernelHeapMem    内核堆内存首地址\nstKernelHeapSize   内核堆大小\npvSystemHeapMem    系统堆内存首地址\nstSystemHeapSize   系统堆大小"},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">对传递的参数进行有效性检查</span></p>","uid":"5bc65882-c1e1-4a0f-8a76-2d3e2c4406b9","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">_KernelPrimaryLowLevelInit内核底层初始化</span></p>","uid":"0e15aae5-209f-4f90-a35f-5763b27757e1","expand":true,"richText":true,"isActive":false,"note":"传递以下参数：\npvKernelHeapMem, stKernelHeapSize,\n                               pvSystemHeapMem, stSystemHeapSize","associativeLineTargets":["335ca162-e377-48f1-b327-bc4c675b2167"],"associativeLineTargetControlOffsets":[[{"x":94,"y":0},{"x":-174.35933027057126,"y":-0.7598211613932904}]],"associativeLinePoint":[{"startPoint":{"x":2683,"y":859},"endPoint":{"x":2871,"y":512.6068532143072,"dir":"left","range":-1.1068532143072096}}],"associativeLineText":{"335ca162-e377-48f1-b327-bc4c675b2167":""}},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">bspIntInit()初始化中断系统</span></p>","expand":true,"richText":true,"isActive":false,"uid":"c3c1b61a-0dd3-4078-b4ea-00bc6256fb59"},"children":[]},{"data":{"text":"<p><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54); font-size: 14px;\">_KernelHighLevelInit()内核高级初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"4ee8b97a-43a9-4206-b21a-5340178b0713"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">_cppRtInit()cpp运行时库初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"5e52a9bd-873a-4142-8449-2d87843743c7"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">pfuncStartHook调用传递来的回调函数，进行用户系统初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"f27762d3-ecf9-4f07-8c46-775c6f615a33"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">_resInit 监视记录资源情况</span></p>","expand":true,"richText":true,"isActive":false,"uid":"cf163e50-e63f-4c0e-b650-0e8763363f86"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">_KernelBootSecondary 从核初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"9dbd39a4-eeec-4c4d-9d13-edf3ddf1299d"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">_KernelPrimaryEntry(LW_CPU_GET_CUR()) 启动内核</span></p>","expand":true,"richText":true,"isActive":false,"uid":"284831a2-d2fd-4401-8f50-3b56caffd712"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">结束</span></p>","expand":true,"richText":true,"isActive":false,"uid":"fad79144-1537-4e53-b118-17239c946d31"},"children":[]}]},{"data":{"text":"<p><span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">_KernelPrimaryLowLevelInit内核底层初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"335ca162-e377-48f1-b327-bc4c675b2167"},"children":[{"data":{"text":"<p><span style=\"\n      color: #749336;\n      font-family: 微软雅黑, Microsoft YaHei;\n      font-size: 14px;\n      font-weight: noraml;\n      font-style: normal;\n      text-decoration: none\n    \">_GlobalPrimaryInit全局变量初始化</span></p>","uid":"d853ff7a-383a-4988-ac88-fd56e5db33e8","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">设置系统状态_K_ucSysStatus为初始化状态INIT</span></p>","uid":"b033008f-4329-4b79-9eae-0eaa3a7f2255","expand":true,"richText":true,"isActive":false,"note":"系统状态分为以下两种：\n#define LW_SYS_STATUS_INIT          0\n#define LW_SYS_STATUS_RUNNING       1\n\nINIT表示处于初始化状态，防止二次初始化"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">初始化内核中关键性的自旋锁（简单的对自旋锁的数据成员赋初值）</span></p>","expand":true,"richText":true,"isActive":false,"uid":"0383720f-1309-4fd0-a9d2-8c7402d4a828","note":"初始化以下三类自旋锁：\n  &_K_klKernel.KERN_slLock);                             /*  初始化内核自旋锁            */\n &_K_slKernTime.SLCA_sl);                               /*  初始化内核时间自旋锁        */\n&_K_slcaAtomic.SLCA_sl);                               /*  初始化原子操作自旋锁        */\n  \n      \n初始化的操作如下：        \n\n    psl->SL_sltData.SLD_uiLock = 0;                                     /*  0: 未锁定状态  1: 锁定状态  */\n    psl->SL_pcpuOwner          = LW_NULL;\n    psl->SL_ulCounter          = 0;\n    psl->SL_pvReserved         = LW_NULL;\n    KN_SMP_WMB();    //内存操作同步，确保在它之前的内存访问操作都完成后，再执行它之后的内存访问操作。"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">内核关键性数据初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"e56459a8-ce0a-4325-82fd-fa563d642325"},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">__cpuPrimaryInit</span></p>","uid":"7ca0c25d-405d-458b-988e-db33dac80e6a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">开始for循环遍历初始化所有cpu</span></p>","uid":"4229ff0c-364d-4bfe-83ae-2b85f2e07067","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">设置cpu_ulStatus为初始状态</span></p>","expand":true,"richText":true,"isActive":false,"uid":"ebab8ab0-9d37-41ac-9c58-0f3f95e09b98","note":"LW_CPU_GET(i)->CPU_ulStatus = 0ul; \n\n实际：直接从cpu表中根据id获取cpu\n#define LW_CPU_GET(id)       (&_K_cpuTable[(id)])                     \n  /*  获得指定 CPU 结构           */"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">初始化当前cpu拥有的tcb自旋锁</span></p>","expand":true,"richText":true,"isActive":false,"uid":"50d80547-d9ec-4825-b5d7-83d361c66106","note":"每个cpu可以并行执行一个线程，所以每个cpu对应一个TCB\n\n__KERNEL_EXT        LW_CLASS_TCB          \n  _K_tcbDummy[LW_CFG_MAX_PROCESSORS];\n\n\n用如下代码进行初始化操作\nLW_SPIN_INIT(&_K_tcbDummy[ulCPUId].TCB_slLock);"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">清除cpu的亲和性</span></p>","expand":true,"richText":true,"isActive":false,"uid":"51fc8086-1ab0-4eb8-b1b1-481754cf3df2","note":"避免只运行亲和线程\n\n(pcpu)->CPU_bOnlyAffinity = LW_FALSE"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">清除cpu核间中断</span></p>","expand":true,"richText":true,"isActive":false,"uid":"8b52f930-6244-4e80-9b97-08f127b7d014","note":"CPU_iIPIPend.counter = 0"},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">结束for循环，完成所有cpu的初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"1540ab40-531e-451d-a7b6-8a374e3653ae"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">__interPrimaryStackInit初始化中断堆栈</span></p>","uid":"4c7a3a6e-a710-4919-b119-6fb0ac5adc49","expand":true,"richText":true,"isActive":false,"note":" 初始化中断堆栈, (SylixOS 在 SMP 中每一个 CPU 都可以接受中断)","generalization":null},"children":[{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">初始化中断向量表的自旋锁</span></p>","uid":"db369b8a-1ca8-4b96-895c-33f707a16f59","expand":true,"richText":true,"isActive":false,"note":"LW_SPIN_INIT(&_K_slcaVectorTable.SLCA_sl)"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">开始for循环为每个cpu初始化中断堆栈</span></p>","uid":"60f7988f-9820-4f24-8ecb-63b34276d0a6","expand":true,"richText":true,"isActive":false,"generalization":null,"note":"主要是：用_K_stkInterruptStack[i][0]的地址为CPU_pstkInterBase（cpu中断堆栈基址）赋值，并且用memset完成对_K_stkInterruptStack的初始化操作"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">获取cpu控制块指针</span></p>","uid":"8f1097cf-841b-424e-ad4f-1e989cc38478","expand":true,"richText":true,"isActive":false,"note":"pcpu = LW_CPU_GET(i)"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">获取当前cpu对应的中断堆栈的内存起始地址</span></p>","uid":"140e5ce6-dbca-4522-9b55-4946acd776fa","expand":true,"richText":true,"isActive":false,"note":"pstk = &_K_stkInterruptStack[i][0]"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">将起始地址以页对齐方式赋给cpu</span></p>","expand":true,"richText":true,"isActive":false,"uid":"31f71cb2-2f41-4e4a-925a-67d0c842921b","note":"pcpu->CPU_pstkInterBase = (PLW_STACK)ROUND_UP(pstk, ARCH_STK_ALIGN_SIZE);"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">初始化中断堆栈内存区</span></p>","expand":true,"richText":true,"isActive":false,"uid":"7feb2c58-dd8a-4cf1-bf1e-99dc9d23459f","note":"lib_memset(_K_stkInterruptStack[i], LW_CFG_STK_EMPTY_FLAG, LW_CFG_INT_STK_SIZE);"},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">结束for循环，完成所有中断堆栈的初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"56b75944-a257-4645-b664-0ef9f6c833ba"},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(116, 147, 54); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 14px;\">__miscPrimarySmpInit与 SMP 有关的全局变量初始化</span></p>","uid":"54a5a525-94e2-4a5d-ba77-f07a171a887e","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54); font-size: 14px;\">初始化SMP中各cpu</span></p>","uid":"3479af9b-118b-4f4d-a632-4769c0503c77","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">分支主题</span></p>","uid":"ce502fa8-eaf2-4dcf-a1a6-ed9c8243a168","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">分支主题</span></p>","uid":"912e6e66-2917-42fb-b385-d2a6a3c009f8","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p><span style=\"font-size: 14px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(116, 147, 54);\">内核关键性状态变量初始化</span></p>","uid":"c287e514-c658-456d-bbb3-a153d9a0477c","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"\n      color: #749336;\n      font-family: 微软雅黑, Microsoft YaHei;\n      font-size: 14px;\n      font-weight: noraml;\n      font-style: normal;\n      text-decoration: none\n    \">_ScheduleInit调度器初始化</span></p>","expand":true,"richText":true,"isActive":false,"uid":"9c0992c8-bcde-4c42-a02e-a7da35deceaf"},"children":[]}]}]},"theme":{"template":"avocado","config":{}},"view":{"transform":{"scaleX":1.0999999999999999,"scaleY":1.0999999999999999,"shear":0,"rotate":0,"translateX":-2808.304736702372,"translateY":-656.0317352582051,"originX":0,"originY":0,"a":1.0999999999999999,"b":0,"c":0,"d":1.0999999999999999,"e":-2808.304736702372,"f":-656.0317352582051},"state":{"scale":1.0999999999999999,"x":-2808.304736702372,"y":-656.0317352582051,"sx":-2808.304736702372,"sy":-656.0317352582051}}}